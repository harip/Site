{"version":3,"sources":["common/components/editor/TextEditor.js","context/PostContext.js","common/components/myposts/Post.js","common/components/skeletons/SkeletonPost.js","common/components/myposts/Posts.js","myposts/ReadOnlyPosts.js"],"names":["TextEditor","props","post","useState","content","postContent","setPostContent","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","newContent","initialState","posts","error","retry","save","addNewBlog","saveComment","PostContext","React","createContext","PostProvider","children","userContextValue","useContext","UserContext","blogs","setBlogs","fetchBlogData","a","axiosConfig","get","response","data","useEffect","id","blogData","put","token","currentPostIndex","findIndex","f","_id","splice","console","comment","newItem","title","subTitle","unshift","patch","Provider","value","useStyles","makeStyles","theme","root","margin","display","justifyContent","alignContent","flexWrap","listStyle","padding","spacing","contactHeader","fontSize","borderBottom","background","card","marginRight","marginBottom","cardActions","borderTop","crudButtons","marginLeft","wrapper","position","commentBox","width","Post","postContext","classes","editClicked","setEditClicked","postComment","setPostComment","postCommentLoading","setPostCommentLoading","item","formik","useFormik","initialValues","onSubmit","values","log","titleCrudButtonMarkup","isLoggedIn","ButtonGroup","type","color","aria-label","className","IconButton","onClick","postSave","postData","postSaveComment","text","handleCommentChange","e","target","Fragment","handleSubmit","Card","CardHeader","TextField","autoFocus","label","name","fullWidth","onChange","handleChange","action","CardContent","CardActions","multiline","rowsMax","SpinnerButton","buttonProps","Typography","variant","dangerouslySetInnerHTML","__html","timeStamp","marginTop","postBody","postTitle","fontFamily","fontWeight","textAlign","sadIcon","button","SkeletonPost","responseData","retryBlog","retryElement","Button","endIcon","Skeleton","Grid","container","direction","justify","alignItems","map","xs","sm","fabAddBlog","zIndex","Posts","document","Fab","ReadOnlyPosts"],"mappings":"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","file":"static/js/4.b01679c0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nconst TextEditor = (props) => {\r\n  const {post} = props;\r\n  const [postContent, setPostContent] = useState(post.content);\r\n\r\n  const handleEditorChange = (content, editor) => {\r\n    setPostContent(content);\r\n    post.newContent = content;\r\n  }\r\n\r\n  return (\r\n    <Editor\r\n      apiKey=\"wefhnu0ma6zh07117uwxwjj5ila4m1d1y16pp4e59wbc6log\"\r\n      initialValue={postContent}\r\n      init={{\r\n        height: 500,\r\n        menubar: false,\r\n        plugins: [\r\n          'advlist autolink lists link image charmap print preview anchor',\r\n          'searchreplace visualblocks code fullscreen',\r\n          'insertdatetime media table paste code codesample image'\r\n        ],\r\n        toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify |  bullist numlist outdent indent | removeformat | codesample | image | code'\r\n      }}\r\n      onEditorChange={handleEditorChange}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nexport default TextEditor; ","import React, { useEffect, useState, useContext } from 'react'; \r\nimport axiosConfig from '../apis/axiosConfig';\r\nimport UserContext from './UserContext';\r\n\r\nconst initialState = {\r\n  // Default empty function\r\n  posts: null,\r\n  error: false, \r\n  retry: ()=>{},\r\n  save: ()=>{},\r\n  addNewBlog: ()=>{},\r\n  saveComment: ()=>{} \r\n};\r\n\r\nconst PostContext = React.createContext(initialState);\r\n\r\nexport const PostProvider = ({children}) => {\r\n  const userContextValue = useContext(UserContext);\r\n  const [blogs, setBlogs] = useState(null);\r\n\r\n  useEffect(() => { \r\n    fetchBlogData(); \r\n  }, [])\r\n\r\n  async function fetchBlogData() { \r\n    let posts = null;\r\n    let error = false; \r\n    try {\r\n      let response = await axiosConfig.get('/post'); \r\n      posts=response.data; \r\n    } catch(err) {\r\n      error = true;\r\n    } \r\n\r\n    setBlogs({\r\n      posts,\r\n      error\r\n    });\r\n  }  \r\n\r\n  const save = async (id,blogData) => { \r\n    if (id){\r\n      blogData[\"_id\"] = id;\r\n    } \r\n\r\n    try {\r\n      await axiosConfig.put('/post',{\r\n        ...blogData,\r\n        token: userContextValue.token\r\n      });\r\n      \r\n      // Reset state\r\n      let { posts } = { ...blogs };  \r\n      let currentPostIndex = posts.findIndex(f=>f._id === `${id}`);\r\n      if (currentPostIndex>=0) {   \r\n        // Set content and titles\r\n        posts.splice(currentPostIndex,1,blogData);\r\n        setBlogs({\r\n          posts,\r\n          error: false\r\n        });\r\n      } \r\n\r\n      // Reset value \r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const addNewBlog = async (id,comment) => { \r\n    try {\r\n      // Create a empty item\r\n      const newItem = {  \r\n        title:'',\r\n        subTitle: '',\r\n        content: 'Enter text' \r\n      }; \r\n      let { posts } = { ...blogs };   \r\n      posts.unshift(newItem);\r\n      setBlogs({\r\n        posts,\r\n        error: false\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    } \r\n  }\r\n\r\n  const saveComment = async (id,comment) => {\r\n    try {\r\n      const response = await axiosConfig.patch('/post',  comment );\r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    } \r\n  }\r\n\r\n  const retryFetchBlog = () =>  fetchBlogData(); \r\n\r\n  return (\r\n    <PostContext.Provider value={{\r\n      ...blogs,\r\n      retry: retryFetchBlog,\r\n      addNewBlog,\r\n      save,\r\n      saveComment      \r\n    }} >\r\n      {children}\r\n    </PostContext.Provider>\r\n  )\r\n};\r\n \r\nexport default PostContext;","import React, { useState,useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader'; \r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';  \r\nimport Typography from '@material-ui/core/Typography'; \r\nimport TextEditor from '../editor/TextEditor';\r\nimport { ButtonGroup, IconButton } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TextField from '@material-ui/core/TextField';  \r\nimport UserContext from '../../../context/UserContext';\r\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\r\nimport SpinnerButton from '../controls/SpinnerButton'; \r\nimport { useFormik } from 'formik'; \r\nimport PostContext from '../../../context/PostContext';\r\n\r\nconst useStyles= makeStyles( (theme)=> ({\r\n    root: {\r\n      margin: 10,\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignContent: 'center',\r\n      flexWrap: 'wrap',\r\n      listStyle: 'none',\r\n      padding: theme.spacing(0.5)  \r\n    },\r\n    contactHeader: {\r\n      fontSize: 20,\r\n      borderBottom: 2,\r\n      background: '#ffa602'\r\n    },\r\n    card: {\r\n        marginRight: 5,\r\n        marginBottom: 5\r\n    },\r\n    cardActions: {\r\n      borderTop: 'solid 1px #f9f5ee'\r\n    },\r\n    crudButtons : {\r\n      marginLeft: 'auto'\r\n    },\r\n    wrapper: {\r\n      margin: theme.spacing(1),\r\n      position: 'relative',\r\n    },\r\n    commentBox: {\r\n      width: '100%'\r\n    },\r\n  }));\r\n \r\nconst Post = (props) => {   \r\n    const userContextValue = useContext(UserContext);\r\n    const postContext = useContext(PostContext); \r\n    const classes = useStyles();  \r\n    const [editClicked, setEditClicked] = useState(false);    \r\n    const [postComment, setPostComment] = useState('');\r\n    const [postCommentLoading, setPostCommentLoading] = useState(false);\r\n  \r\n    // Parent events\r\n    const {item } = props; \r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        title: item.title,\r\n        subTitle: item.subTitle,\r\n        content: item.content\r\n      },\r\n      onSubmit: (values) => {\r\n        console.log(values);\r\n      }\r\n    });\r\n\r\n    const getForm = () => {\r\n      return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <Card  > \r\n            <CardHeader\r\n                className={classes.contactHeader}\r\n                title={\r\n                  <React.Fragment>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"postTitle\"\r\n                      label=\"title\"\r\n                      name = \"title\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={formik.values.title}\r\n                      onChange={formik.handleChange}\r\n                    />   \r\n                    <TextField \r\n                      margin=\"dense\"\r\n                      name= \"subTitle\"\r\n                      id=\"postSubTitle\"\r\n                      label=\"subTitle\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={formik.values.subTitle}\r\n                      onChange={formik.handleChange}\r\n                    />                      \r\n                  </React.Fragment>    \r\n                }  \r\n                action={titleCrudButtonMarkup()}\r\n            /> \r\n            <CardContent>  \r\n              <div id=\"container\">\r\n                <TextEditor post={item} /> \r\n              </div> \r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n                <InsertCommentIcon />\r\n                <TextField\r\n                  id=\"standard-multiline-flexible\"\r\n                  label=\"add comment\"\r\n                  className={classes.commentBox}\r\n                  multiline\r\n                  rowsMax={4} \r\n                  value={postComment}\r\n                  onChange={handleCommentChange}\r\n                />\r\n                <SpinnerButton buttonProps = {{\r\n                  'text': 'Save',\r\n                  'onClick':  postSaveComment,\r\n                  'loading' : postCommentLoading\r\n                  }}\r\n                />\r\n            </CardActions> \r\n          </Card>  \r\n        </form>\r\n      );  \r\n    }\r\n\r\n    /**\r\n     * Get save and edit button markup for title\r\n     */\r\n    const titleCrudButtonMarkup = () => {  \r\n      if (!userContextValue.isLoggedIn()) {\r\n        return null;\r\n      }\r\n\r\n      // show edit functionality\r\n      return (\r\n        <ButtonGroup \r\n          type=\"submit\"\r\n          color=\"primary\" \r\n          aria-label=\"outlined primary button group\" \r\n          className={classes.crudButtons}>\r\n            {\r\n              !editClicked \r\n              ?  <IconButton aria-label=\"edit\" onClick={()=>setEditClicked(!editClicked)}><EditIcon /></IconButton>       \r\n              :  <IconButton aria-label=\"save\" onClick={()=> postSave()} color=\"primary\"><SaveIcon /></IconButton>      \r\n            } \r\n        </ButtonGroup>\r\n      );\r\n    };\r\n\r\n    const getReadOnlyForm = () => {\r\n      return (\r\n        <Card  > \r\n          <CardHeader\r\n              className={classes.contactHeader}\r\n              title={\r\n                <React.Fragment>\r\n                  <Typography variant=\"h3\">{item.title}</Typography>     \r\n                  <Typography variant=\"h6\">{item.subTitle}</Typography>    \r\n                </React.Fragment> \r\n              }  \r\n              action={titleCrudButtonMarkup()}\r\n          /> \r\n          <CardContent>  \r\n            <div id=\"container\"\r\n              dangerouslySetInnerHTML={{\r\n                __html: props.item.content\r\n              }}>\r\n            </div> \r\n          </CardContent>\r\n          <CardActions className={classes.cardActions}>\r\n              <InsertCommentIcon />\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"add comment\"\r\n                className={classes.commentBox}\r\n                multiline\r\n                rowsMax={4} \r\n                value={postComment}\r\n                onChange={handleCommentChange}\r\n              />\r\n              <SpinnerButton buttonProps = {{\r\n                'text': 'Save',\r\n                'onClick':  postSaveComment,\r\n                'loading' : postCommentLoading\r\n                }}\r\n              />\r\n          </CardActions> \r\n        </Card>  \r\n      );     \r\n    } \r\n\r\n    /**\r\n     * Invoke save method that will call the parent save\r\n     * parent save will invoke the api\r\n     */\r\n    const postSave = () => {    \r\n      // Get post data \r\n      let postData = { \r\n        ...props.item, \r\n        title:formik.values.title,\r\n        subTitle: formik.values.subTitle,\r\n        content: props.item.newContent ? props.item.newContent: props.item.content \r\n      }; \r\n      const isSuccess = postContext.save(props.item[\"_id\"],postData);\r\n      if (isSuccess) {\r\n        setEditClicked(!editClicked);\r\n      } \r\n    }\r\n\r\n    const postSaveComment = () => {\r\n      setPostCommentLoading(true);\r\n      const isSuccess = postContext.saveComment(props.item[\"_id\"],{ \r\n        _id: props.item[\"_id\"],\r\n        text: postComment\r\n      });\r\n      setPostCommentLoading(false);\r\n    }\r\n\r\n    /**\r\n     * Function to change post comment (controlled)\r\n     * @param {*} e comment event\r\n     */\r\n    const handleCommentChange = (e) => {\r\n      setPostComment(e.target.value);\r\n    }  \r\n \r\n    const getPostCard = () => {  \r\n      return (  \r\n        <div className={classes.wrapper}>\r\n          <div className={classes.card}> \r\n            {\r\n              editClicked\r\n              ? getForm()\r\n              : getReadOnlyForm()\r\n            }            \r\n          </div>   \r\n        </div> \r\n      );\r\n    }  \r\n\r\n    return(  \r\n      <React.Fragment key={props.item.timeStamp}> \r\n        {getPostCard(props.item)} \r\n      </React.Fragment>\r\n    );   \r\n}\r\n\r\nexport default Post;","import Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport Grid from '@material-ui/core/Grid';    \r\nimport { Button, Typography } from '@material-ui/core';\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport RefreshIcon from '@material-ui/icons/Refresh'; \r\n\r\nconst useStyles= makeStyles( (theme)=> ({\r\n    post: {\r\n      marginTop: 30\r\n    },\r\n    postBody : {\r\n        height: 118,\r\n        marginTop: -8,\r\n        width: '100%'\r\n    },\r\n    postTitle: {\r\n        height: 50,\r\n        background: '#ffa602'\r\n    },\r\n    retry: {\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontWeight: 'lighter',\r\n        textAlign: 'center'\r\n    },\r\n    sadIcon: {\r\n        fontSize: '40px'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n  })); \r\n\r\nconst SkeletonPost = (props) =>{\r\n    const { responseData, retry } = props; \r\n    const posts = [1,2,3];\r\n    const classes = useStyles();    \r\n\r\n    const retryBlog = () => retry();\r\n\r\n    const retryElement = (item) => {\r\n        if (item ===1 && responseData && responseData.error) {\r\n            return(\r\n                <div className={classes.retry} onClick={retryBlog}>\r\n                    <Typography variant=\"label\">Something went wrong </Typography>\r\n                    <br/>\r\n                    <SentimentVeryDissatisfiedIcon className={classes.sadIcon}/>\r\n                    <br/>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<RefreshIcon/>}\r\n                    >\r\n                        Retry\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n            <Skeleton variant=\"rect\" className={classes.postBody}/> \r\n        );\r\n    }\r\n\r\n    return(\r\n        <Grid container direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">       \r\n            {posts.map((item) => { \r\n                return(\r\n                <Grid \r\n                    key={item} \r\n                    item xs={12} \r\n                    sm={9} \r\n                    className={classes.post}>   \r\n                        <Skeleton variant=\"text\" className={classes.postTitle}/>\r\n                        {retryElement(item)}\r\n                </Grid> \r\n                );\r\n            })}       \r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SkeletonPost;","import React, { useEffect, useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport Grid from '@material-ui/core/Grid';    \r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Post from './Post';\r\nimport PostContext from '../../../context/PostContext'; \r\nimport SkeletonPost from '../skeletons/SkeletonPost';\r\nimport UserContext from '../../../context/UserContext';\r\n\r\nconst useStyles= makeStyles( (theme)=> ({  \r\n  card: {\r\n    marginRight: 5,\r\n    marginBottom: 5\r\n  },\r\n  post: {\r\n    marginTop: 30\r\n  },\r\n  fabAddBlog: {\r\n    marginTop: 10,\r\n    position: 'fixed', \r\n    marginLeft: 'auto',  \r\n    zIndex: 999\r\n  },\r\n})); \r\n\r\nconst Posts = (props) => { \r\n  const postContext = useContext(PostContext); \r\n  const userContextValue = useContext(UserContext);\r\n  const classes = useStyles();   \r\n\r\n  useEffect(() => {\r\n    document.title=\"Blog\";\r\n  }, []);  \r\n\r\n  const retryFetchPosts = () => postContext.retry();\r\n\r\n  if ( !postContext || (postContext && postContext.error) || (postContext && !postContext.posts)){\r\n    // Return a ghost element\r\n    return (\r\n      <SkeletonPost responseData={postContext} retry={retryFetchPosts}/>\r\n    );\r\n  }  \r\n\r\n  const { posts } = postContext;  \r\n\r\n  return(  \r\n    <React.Fragment> \r\n      {\r\n        userContextValue.isLoggedIn() \r\n        ? \r\n          <div className={classes.fabAddBlog}> \r\n            <Fab color=\"primary\" aria-label=\"add\" onClick={postContext.addNewBlog} >\r\n              <AddIcon />\r\n            </Fab>    \r\n          </div>        \r\n        : ''\r\n      } \r\n\r\n      <Grid container direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\">   \r\n        {posts.map((item) => { \r\n          return(\r\n            <Grid key={item._id} item xs={12} sm={9} className={classes.post}>   \r\n              <Post \r\n                item={item}  \r\n                key={item._id}\r\n              />\r\n            </Grid> \r\n          );\r\n        })}       \r\n      </Grid>  \r\n    </React.Fragment>\r\n  );  \r\n}\r\n\r\nexport default Posts;","/**\r\n * Blog articles page\r\n */ \r\nimport {useContext} from 'react';\r\nimport Posts from '../common/components/myposts/Posts';\r\nimport PostContext, { PostProvider } from '../context/PostContext';\r\n\r\nconst ReadOnlyPosts = () => {   \r\n  const data = useContext(PostContext); \r\n  if (!data){\r\n    return <div>Loading...</div>\r\n  }  \r\n \r\n  return (\r\n    <PostProvider>\r\n      <Posts/> \r\n    </PostProvider>\r\n  );\r\n}\r\n\r\nexport default ReadOnlyPosts;"],"sourceRoot":""}