{"version":3,"sources":["common/components/editor/TextEditor.js","common/components/myposts/Post.js","context/PostContext.js","common/components/myposts/PostService.js","common/components/skeletons/SkeletonPost.js","common/components/myposts/Posts.js","myposts/ReadOnlyPosts.js"],"names":["TextEditor","props","post","useState","content","postContent","setPostContent","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","newContent","useStyles","makeStyles","theme","root","margin","display","justifyContent","alignContent","flexWrap","listStyle","padding","spacing","contactHeader","fontSize","borderBottom","background","card","marginRight","marginBottom","cardActions","borderTop","crudButtons","marginLeft","wrapper","position","commentBox","width","Post","item","userContextValue","useContext","UserContext","classes","title","postTitle","setPostTitle","titleEdit","setTitleEdit","React","loading","showCommentBox","setShowCommentBox","postComment","setPostComment","postCommentLoading","setPostCommentLoading","savePost","saveComment","cardTitle","Typography","TextField","autoFocus","id","label","type","fullWidth","value","onChange","handleChange","e","target","onTitleEdit","postSaveComment","commentData","text","handleCommentChange","titleCrudButtonMarkup","isLoggedIn","ButtonGroup","color","aria-label","className","IconButton","onClick","postData","token","status","postSave","Fragment","disabled","Card","CardHeader","action","CardContent","dangerouslySetInnerHTML","__html","CardActions","disableSpacing","multiline","rowsMax","SpinnerButton","buttonProps","timeStamp","PostContext","createContext","posts","PostProvider","children","setPostData","useEffect","a","axiosCfg","get","response","contextValue","data","fetchData","Provider","PostData","axiosConfig","put","PatchComment","patch","marginTop","postBody","SkeletonPost","Grid","container","direction","justify","alignItems","map","xs","sm","Skeleton","variant","Posts","document","onSavePost","currentPost","callback","postDataResponse","onSaveComment","commentSaveResponse","_id","ReadOnlyPosts"],"mappings":"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","file":"static/js/4.ffdf06ea.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst TextEditor = (props) => {\n  const {post} = props;\n  const [postContent, setPostContent] = useState(post.content);\n\n  const handleEditorChange = (content, editor) => {\n    setPostContent(content);\n    post.newContent = content;\n  }\n\n  return (\n    <Editor\n      apiKey=\"wefhnu0ma6zh07117uwxwjj5ila4m1d1y16pp4e59wbc6log\"\n      initialValue={postContent}\n      init={{\n        height: 500,\n        menubar: false,\n        plugins: [\n          'advlist autolink lists link image charmap print preview anchor',\n          'searchreplace visualblocks code fullscreen',\n          'insertdatetime media table paste code codesample image'\n        ],\n        toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify |  bullist numlist outdent indent | removeformat | codesample | image'\n      }}\n      onEditorChange={handleEditorChange}\n    />\n  );\n\n}\n\nexport default TextEditor; ","import React, { useState,useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader'; \nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';  \nimport Typography from '@material-ui/core/Typography'; \nimport TextEditor from '../editor/TextEditor';\nimport { ButtonGroup, IconButton } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';  \nimport UserContext from '../../../context/UserContext';\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\nimport SpinnerButton from '../controls/SpinnerButton';\n\nconst useStyles= makeStyles( (theme)=> ({\n    root: {\n      margin: 10,\n      display: 'flex',\n      justifyContent: 'center',\n      alignContent: 'center',\n      flexWrap: 'wrap',\n      listStyle: 'none',\n      padding: theme.spacing(0.5)  \n    },\n    contactHeader: {\n      fontSize: 20,\n      borderBottom: 2,\n      background: '#ffa602'\n    },\n    card: {\n        marginRight: 5,\n        marginBottom: 5\n    },\n    cardActions: {\n      borderTop: 'solid 1px #f9f5ee'\n    },\n    crudButtons : {\n      marginLeft: 'auto'\n    },\n    wrapper: {\n      margin: theme.spacing(1),\n      position: 'relative',\n    },\n    commentBox: {\n      width: '100%'\n    },\n  }));\n\nconst Post = (props) => {   \n    const userContextValue = useContext(UserContext);\n    const classes = useStyles();\n    const [postTitle, setPostTitle] = useState(props.item.title);\n    const [titleEdit, setTitleEdit] = useState(true);\n    const [loading, setLoading] = React.useState(true);\n    const [showCommentBox, setShowCommentBox] = React.useState(false);\n\n    const [postComment, setPostComment] = useState('');\n    const [postCommentLoading, setPostCommentLoading] = useState(false);\n  \n    // Parent events\n    const {savePost,saveComment} = props;\n \n    /**\n     * Function that renders the title markup edit mode or readonly mode\n     * @param {*} item current item that is being edited\n     */\n    const cardTitle = (item) => { \n      return (\n        <div>  \n          {\n            !titleEdit\n            ?  \n              <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"postTitle\"\n                label=\"title\"\n                type=\"text\"\n                fullWidth\n                value={postTitle}\n                onChange={handleChange}\n              />                 \n            :  <Typography>{item.title}</Typography>     \n          }  \n        </div>\n      );\n    } \n\n    /**\n     * Function to change title (controlled)\n     * @param {*} e title event\n     */\n    const handleChange = (e) => {\n      setPostTitle(e.target.value);\n    }\n\n    /**\n     * Function that will enable editing content\n     */\n    const renderContent = () => {\n      return (\n        <React.Fragment>\n          {\n            !titleEdit \n            ?  <TextEditor post={props.item} /> \n            :  \n              <div\n              dangerouslySetInnerHTML={{\n                __html: props.item.content\n              }}></div>\n          }\n        </React.Fragment>\n      );\n    } \n\n    const onTitleEdit = () => {\n      setTitleEdit(false)\n    }\n\n    /**\n     * Invoke save method that will call the parent save\n     * parent save will invoke the api\n     */\n    const postSave = () => { \n      // Get post data\n      const postData = {\n        title: postTitle,\n        content: props.item.newContent,\n        token: userContextValue.token\n      };\n\n      if (props.item[\"_id\"]){\n        postData[\"_id\"] = props.item[\"_id\"];\n      } \n      \n      setTitleEdit(true);  \n      savePost(props.item, postData, (status)=>{\n        if (status) {\n          setTitleEdit(true);  \n        }\n      });\n    }\n\n    const postSaveComment = () => {\n      setPostCommentLoading(true);\n      // Get post data\n      const commentData = { \n        text: postComment\n      };\n\n      if (props.item[\"_id\"]){\n        commentData[\"_id\"] = props.item[\"_id\"];\n      } \n\n      saveComment(commentData, ()=> {\n        setPostCommentLoading(false);\n      })\n    }\n\n    /**\n     * Function to change post comment (controlled)\n     * @param {*} e comment event\n     */\n    const handleCommentChange = (e) => {\n      setPostComment(e.target.value);\n    } \n    \n    /**\n     * Get save and edit button markup for title\n     */\n    const titleCrudButtonMarkup = () => {  \n      if (!userContextValue.isLoggedIn()) {\n        return null;\n      }\n\n      // show edit functionality\n      return (\n        <ButtonGroup \n          color=\"primary\" \n          aria-label=\"outlined primary button group\" \n          className={classes.crudButtons}>\n            {\n              titleEdit \n              ?  <IconButton aria-label=\"edit\" onClick={onTitleEdit}><EditIcon /></IconButton>       \n              :  <IconButton aria-label=\"save\" onClick={ ()=> postSave()} color=\"primary\"><SaveIcon /></IconButton>      \n            } \n        </ButtonGroup>\n      );\n    };\n\n    const getPostCard = (item) => {  \n        return (  \n          <div className={classes.wrapper} disabled={loading}>\n            <div className={classes.card}>\n                <Card  > \n                    <CardHeader\n                        className={classes.contactHeader}\n                        title={\n                          cardTitle(item)\n                        }  \n                        action={titleCrudButtonMarkup()}\n                    /> \n                    <CardContent> \n                        <div id=\"container\">\n                            {renderContent()}\n                        </div>\n                    </CardContent>\n                    <CardActions disableSpacing className={classes.cardActions}>\n                        <IconButton aria-label=\"add comment\" onClick={()=> setShowCommentBox(!showCommentBox)} >\n                          <InsertCommentIcon />\n                        </IconButton>  \n                        <TextField\n                          id=\"standard-multiline-flexible\"\n                          label=\"add comment\"\n                          className={classes.commentBox}\n                          multiline\n                          rowsMax={4} \n                          value={postComment}\n                          onChange={handleCommentChange}\n                        />\n                        <SpinnerButton buttonProps = {{\n                          'text': 'Save',\n                          'onClick':  postSaveComment,\n                          'loading' : postCommentLoading\n                          }}\n                        />\n                    </CardActions> \n                </Card> \n            </div>   \n          </div> \n        );\n    }  \n\n    return(  \n        <React.Fragment key={props.item.timeStamp}>\n            {getPostCard(props.item)} \n            </React.Fragment>\n      );   \n}\n\nexport default Post;","import React, { useEffect, useState } from 'react'; \nimport axiosCfg from '../apis/axiosConfig';\n\nconst PostContext = React.createContext({\n  // Default empty function\n  posts: null\n});\n\nexport const PostProvider = ({children}) => {\n  const [postData, setPostData] = useState(null);\n\n  useEffect(() => {\n    // Make api call to get posts and set data\n    async function fetchData() { \n      let response = await axiosCfg.get('/post'); \n      \n      // Payload\n      const contextValue = {\n        posts: response.data\n      }\n\n      setPostData(contextValue);\n    }\n    fetchData(); \n  }, [])\n\n  return (\n    <PostContext.Provider value={postData} >\n      {children}\n    </PostContext.Provider>\n  )\n};\n \nexport default PostContext;","import axiosConfig from \"../../../apis/axiosConfig\"; \n\nconst PostData = async (data) => { \n  const response = await axiosConfig.put('/post',data);\n  return response.data;\n};\n\nexport const PatchComment = async (data) => {\n  const response = await axiosConfig.patch('/post',data);\n  return response.data;\n}\n\nexport default PostData;","import Skeleton from '@material-ui/lab/Skeleton';\nimport { makeStyles } from '@material-ui/core/styles'; \nimport Grid from '@material-ui/core/Grid';    \n\nconst useStyles= makeStyles( (theme)=> ({\n    post: {\n      marginTop: 30\n    },\n    postBody : {\n        height: 118,\n        marginTop: -8\n    },\n    postTitle: {\n        height: 50,\n        background: '#ffa602'\n    }\n  })); \n\nconst SkeletonPost = () =>{\n    const posts = [1,2,3];\n    const classes = useStyles();   \n\n    return(\n        <Grid container direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\">       \n            {posts.map((item) => { \n                return(\n                <Grid \n                    key={item} \n                    item xs={12} \n                    sm={9} \n                    className={classes.post}>   \n                        <Skeleton variant=\"text\" className={classes.postTitle}/>\n                        <Skeleton variant=\"rect\" className={classes.postBody} />\n                </Grid> \n                );\n            })}       \n        </Grid>\n    );\n};\n\nexport default SkeletonPost;","import React, { useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'; \nimport Grid from '@material-ui/core/Grid';    \nimport Post from './Post';\nimport PostContext from '../../../context/PostContext';\nimport PostData, {PatchComment} from '../myposts/PostService';\nimport SkeletonPost from '../skeletons/SkeletonPost';\n\nconst useStyles= makeStyles( (theme)=> ({  \n  card: {\n    marginRight: 5,\n    marginBottom: 5\n  },\n  post: {\n    marginTop: 30\n  }\n})); \n\nconst Posts = (props) => { \n  const data = useContext(PostContext); \n  const classes = useStyles();   \n\n  useEffect(() => {\n    document.title=\"Add Posts\";\n  }, []);  \n\n  if (!data){\n    // Return a ghost element\n    return (\n      <SkeletonPost/>\n    );\n  }  \n\n  const { posts } = data; \n  /**\n   * Function that will be triggered when a post is changed\n   * @param {*} item post that was changed\n   */\n  const onSavePost = async (currentPost, postData, callback) => {\n    // Save to database and if successful show that in frontend as well\n    // If not show an error dialog to the user\n    const postDataResponse = await PostData(postData); \n    const status = postDataResponse['success'];\n    callback(status);\n    if (status && status === true) {\n      currentPost.title = postData.title;\n      currentPost.content = postData.content;\n    } \n  }\n\n  const onSaveComment = async (commentData,callback) => {\n    const commentSaveResponse = await PatchComment(commentData); \n    const status = commentSaveResponse['success']; \n    callback();\n  }\n\n  return(  \n    <Grid container direction=\"row\"\n    justify=\"center\"\n    alignItems=\"center\">       \n      {posts.map((item) => { \n        return(\n          <Grid key={item._id} item xs={12} sm={9} className={classes.post}>   \n            <Post \n              item={item} \n              savePost={onSavePost} \n              saveComment={onSaveComment}  \n              key={item._id}\n            />\n          </Grid> \n        );\n      })}       \n    </Grid> \n  );  \n}\n\nexport default Posts;","/**\n * Display admin view of posts\n * Use a posts context\n */ \nimport {useContext} from 'react';\nimport Posts from '../common/components/myposts/Posts';\nimport PostContext, { PostProvider } from '../context/PostContext';\n\nconst ReadOnlyPosts = () => {   \n  const data = useContext(PostContext); \n  if (!data){\n    return <div>Loading...</div>\n  }  \n \n  return (\n    <PostProvider>\n      <Posts/> \n    </PostProvider>\n  );\n}\n\nexport default ReadOnlyPosts;"],"sourceRoot":""}